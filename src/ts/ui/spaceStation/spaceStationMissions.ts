//  This file is part of Cosmos Journeyer
//
//  Copyright (C) 2024 Barthélemy Paléologue <barth.paleologue@cosmosjourneyer.com>
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.

import { uniformRandBool } from "extended-random";

import { OrbitalFacilityModel } from "../../architecture/orbitalObjectModel";
import { ISoundPlayer } from "../../audio/soundPlayer";
import { generateSightseeingMissions } from "../../missions/generateSightSeeingMissions";
import { Player } from "../../player/player";
import { Settings } from "../../settings";
import { StarSystemDatabase } from "../../starSystem/starSystemDatabase";
import { getNeighborStarSystemCoordinates } from "../../utils/getNeighborStarSystems";
import { getRngFromSeed } from "../../utils/getRngFromSeed";
import { parseDistance } from "../../utils/strings/parseToStrings";
import { DeepReadonly } from "../../utils/types";
import { MissionContainer } from "./missionContainer";

/**
 * Generates all missions available at the given space station for the player. Missions are generated based on the current timestamp (hourly basis).
 * @param stationModel The space station model where the missions are generated
 * @param player The player for which the missions are generated
 * @returns The DOM element containing the generated missions as HTML
 */
export function generateMissionsDom(
    stationModel: DeepReadonly<OrbitalFacilityModel>,
    player: Player,
    starSystemDatabase: StarSystemDatabase,
    soundPlayer: ISoundPlayer
): HTMLDivElement {
    const starSystemModel = starSystemDatabase.getSystemModelFromCoordinates(stationModel.starSystemCoordinates);
    if (starSystemModel === null) {
        throw new Error("Cannot generate missions for a space station in an unknown star system");
    }

    const sightSeeingMissions = generateSightseeingMissions(
        stationModel,
        starSystemModel,
        starSystemDatabase,
        player,
        Date.now()
    );

    const starSystem = starSystemModel;
    const neighborSystems = getNeighborStarSystemCoordinates(starSystem.coordinates, 75, starSystemDatabase);

    const rng = getRngFromSeed(stationModel.seed);

    let neighborSpaceStations: Array<{ model: DeepReadonly<OrbitalFacilityModel>; distance: number }> = [];
    for (const neighbor of neighborSystems) {
        const systemModel = starSystemDatabase.getSystemModelFromCoordinates(neighbor.coordinates);
        if (systemModel === null) {
            throw new Error("System model not found for coordinates generated by getNeighborStarSystemCoordinates");
        }
        const spaceStations = systemModel.orbitalFacilities.map<{
            model: DeepReadonly<OrbitalFacilityModel>;
            distance: number;
        }>((stationModel) => {
            return { model: stationModel, distance: neighbor.distance };
        });
        neighborSpaceStations = neighborSpaceStations.concat(spaceStations);
    }

    const contactStations = neighborSpaceStations
        // prune list randomly based on distance
        .filter((station, index) => uniformRandBool(1.0 / (1.0 + 0.02 * station.distance ** 2), rng, 325 + index))
        // filter out stations of the same faction
        .filter((station) => station.model.faction === stationModel.faction);

    contactStations.sort((a, b) => a.distance - b.distance);

    const htmlRoot = document.createElement("div");

    const missionH2 = document.createElement("h2");
    missionH2.innerText = "Missions";
    htmlRoot.appendChild(missionH2);

    const explorationMissionH3 = document.createElement("h3");
    explorationMissionH3.innerText = "Exploration";
    htmlRoot.appendChild(explorationMissionH3);

    const missionList = document.createElement("div");
    missionList.className = "missionList";
    htmlRoot.appendChild(missionList);

    sightSeeingMissions.forEach((mission) => {
        const missionContainer = new MissionContainer(mission, player, starSystemDatabase, soundPlayer);
        missionList.appendChild(missionContainer.rootNode);
    });

    const terraformationMissionH3 = document.createElement("h3");
    terraformationMissionH3.innerText = "Terraformation";
    htmlRoot.appendChild(terraformationMissionH3);

    const tradingMissionH3 = document.createElement("h3");
    tradingMissionH3.innerText = "Trading";
    htmlRoot.appendChild(tradingMissionH3);

    contactStations.forEach(({ model: station, distance }) => {
        const stationP = document.createElement("p");
        stationP.innerText = `${station.name} in ${starSystem.name} (${parseDistance(distance * Settings.LIGHT_YEAR)})`;
        htmlRoot.appendChild(stationP);
    });

    return htmlRoot;
}
