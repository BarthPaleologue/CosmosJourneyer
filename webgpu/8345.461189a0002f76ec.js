"use strict";(globalThis.webpackChunkcosmos_journeyer=globalThis.webpackChunkcosmos_journeyer||[]).push([["8345"],{1137:function(t,i,r){r.d(i,{$:()=>h});class h{constructor(t,i){this.width=t,this.height=i}toString(){return`{W: ${this.width}, H: ${this.height}}`}getClassName(){return"Size"}getHashCode(){let t=0|this.width;return 397*t^(0|this.height)}copyFrom(t){this.width=t.width,this.height=t.height}copyFromFloats(t,i){return this.width=t,this.height=i,this}set(t,i){return this.copyFromFloats(t,i)}multiplyByFloats(t,i){return new h(this.width*t,this.height*i)}clone(){return new h(this.width,this.height)}equals(t){return!!t&&this.width===t.width&&this.height===t.height}get surface(){return this.width*this.height}static Zero(){return new h(0,0)}add(t){return new h(this.width+t.width,this.height+t.height)}subtract(t){return new h(this.width-t.width,this.height-t.height)}scale(t){return new h(this.width*t,this.height*t)}static Lerp(t,i,r){return new h(t.width+(i.width-t.width)*r,t.height+(i.height-t.height)*r)}}},62941:function(t,i,r){r.d(i,{J:()=>s});var h=r(61834);class s{constructor(t,i,r,s){this.normal=new h.P(t,i,r),this.d=s}asArray(){return[this.normal.x,this.normal.y,this.normal.z,this.d]}clone(){return new s(this.normal.x,this.normal.y,this.normal.z,this.d)}getClassName(){return"Plane"}getHashCode(){let t=this.normal.getHashCode();return 397*t^(0|this.d)}normalize(){let t=Math.sqrt(this.normal.x*this.normal.x+this.normal.y*this.normal.y+this.normal.z*this.normal.z),i=0;return 0!==t&&(i=1/t),this.normal.x*=i,this.normal.y*=i,this.normal.z*=i,this.d*=i,this}transform(t){let i=s._TmpMatrix;t.invertToRef(i);let r=i.m,h=this.normal.x,n=this.normal.y,e=this.normal.z,o=this.d,a=h*r[0]+n*r[1]+e*r[2]+o*r[3],l=h*r[4]+n*r[5]+e*r[6]+o*r[7];return new s(a,l,h*r[8]+n*r[9]+e*r[10]+o*r[11],h*r[12]+n*r[13]+e*r[14]+o*r[15])}dotCoordinate(t){return this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z+this.d}copyFromPoints(t,i,r){let h,s=i.x-t.x,n=i.y-t.y,e=i.z-t.z,o=r.x-t.x,a=r.y-t.y,l=r.z-t.z,m=n*l-e*a,d=e*o-s*l,u=s*a-n*o,c=Math.sqrt(m*m+d*d+u*u);return h=0!==c?1/c:0,this.normal.x=m*h,this.normal.y=d*h,this.normal.z=u*h,this.d=-(this.normal.x*t.x+this.normal.y*t.y+this.normal.z*t.z),this}isFrontFacingTo(t,i){return h.P.Dot(this.normal,t)<=i}signedDistanceTo(t){return h.P.Dot(t,this.normal)+this.d}static FromArray(t){return new s(t[0],t[1],t[2],t[3])}static FromPoints(t,i,r){let h=new s(0,0,0,0);return h.copyFromPoints(t,i,r),h}static FromPositionAndNormal(t,i){let r=new s(0,0,0,0);return this.FromPositionAndNormalToRef(t,i,r)}static FromPositionAndNormalToRef(t,i,r){return r.normal.copyFrom(i),r.normal.normalize(),r.d=-t.dot(r.normal),r}static SignedDistanceToPlaneFromPositionAndNormal(t,i,r){let s=-(i.x*t.x+i.y*t.y+i.z*t.z);return h.P.Dot(r,i)+s}}s._TmpMatrix=h.y3.Identity()}}]);